<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>br.com.itau.comarhe</groupId>
	<artifactId>spring-boot-gatling</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>spring-boot-gatling</name>
	<description>Demo Microservice with Spring Boot and Gatling tests</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.3.RELEASE</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-cloud.version>Finchley.RELEASE</spring-cloud.version>
		<maven-jar-plugin.version>2.6</maven-jar-plugin.version>

		<!-- <jacoco.version>0.7.9</jacoco.version> -->
		<jacoco.version>0.8.1</jacoco.version>
		<io.gatling.version>2.1.6</io.gatling.version>
		<!-- The Sonar Jacoco Listener for JUnit to extract coverage details per
			test -->
		<sonar-jacoco-listeners.version>1.4</sonar-jacoco-listeners.version>
		<!-- Tells Sonar to use jacoco for coverage results -->
		<sonar.projectKey>spring-boot-gatling</sonar.projectKey>
		<sonar.projectName>Garantias Garantia Microservice</sonar.projectName>
		<sonar.language>java</sonar.language>
		<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<!-- excludes generated -->
		<sonar.exclusions>
			**/generated/**/*,
			**/sandbox/**/*,
			**/config/**/*,
			**/com/itau/ifp/k9/GarantiaMicroserviceApplication.java
		</sonar.exclusions>
		<sonar.coverage.exclusions>
			**/generated/**/*,
			**/sandbox/**/*,
			**/config/**/*,
			**/com/itau/ifp/k9/GarantiaMicroserviceApplication.java
		</sonar.coverage.exclusions>
		<!-- Jacoco version to use -->
		<jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
		<!-- Jacoco output file for UTs -->
		<jacoco.out.ut.file>jacoco.exec</jacoco.out.ut.file>
		<!-- Tells Sonar where the Jacoco coverage result file is located for Unit
			Tests -->
		<sonar.jacoco.reportPaths>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPaths>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
		    <groupId>javax</groupId>
		    <artifactId>javaee-api</artifactId>
		    <version>7.0</version>
		    <scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>16.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<!--
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-verifier</artifactId>
			<scope>test</scope>
		</dependency>
<!--
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-oauth2</artifactId>
		</dependency>
 -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.8.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.8.0</version>
		</dependency>

		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>2.1.1</version>
		</dependency>

		<!--  Dependências banco de dados
		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>mssql-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>sqljdbc4</artifactId>
			<version>4.0</version>
		</dependency>
		-->

		<!-- Dependências fila MQ
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-activemq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.qpid</groupId>
			<artifactId>qpid-jms-client</artifactId>
			<version>0.31.0.redhat-2</version>
		</dependency>
		-->

		<!-- Archunit dependencies -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit4</artifactId>
			<version>0.9.1</version>
			<scope>test</scope>
		</dependency>


		<dependency>
			<groupId>org.codehaus.sonar-plugins.java</groupId>
			<artifactId>sonar-jacoco-listeners</artifactId>
			<version>${sonar-jacoco-listeners.version}</version>
			<scope>test</scope>
		</dependency>


		<!--  Apache Commons -->

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.2</version>
		</dependency>

		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.2</version>
		</dependency>

		<dependency>
		   <groupId>io.gatling.highcharts</groupId>
		   <artifactId>gatling-charts-highcharts</artifactId>
		   <version>${io.gatling.version}</version>
		   <scope>test</scope>
		 </dependency>

	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<profiles>
		<profile>
			<id>local</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.xerial</groupId>
					<artifactId>sqlite-jdbc</artifactId>
				</dependency>
				<dependency>
					<groupId>com.zsoltfabok</groupId>
					<artifactId>sqlite-dialect</artifactId>
					<version>1.0</version>
				</dependency>
				<dependency>
			        <groupId>org.apache.activemq</groupId>
			        <artifactId>activemq-broker</artifactId>
			    </dependency>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-jetty</artifactId>
				</dependency>
<!-- 				<dependency>
				    <groupId>javax.servlet</groupId>
				    <artifactId>javax.servlet-api</artifactId>
				    <scope>provided</scope>
				</dependency> -->
			</dependencies>
		</profile>
	</profiles>

	<build>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.springframework.cloud</groupId>
										<artifactId>spring-cloud-contract-maven-plugin</artifactId>
										<versionRange>[1.0,)</versionRange>
										<goals>
											<goal>convert</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

				<plugin>
				  <groupId>io.gatling</groupId>
				  <artifactId>gatling-maven-plugin</artifactId>
				  <version>${io.gatling.version}</version>
				  <executions>
					<execution>
						<phase>integration-test</phase>
						<configuration>
							<resultsFolder>${project.basedir}/output/test/results</resultsFolder>
						</configuration>
						<goals>
							<goal>execute</goal>
						</goals>
					</execution>
				  </executions>
				  <configuration>
				  	<runMultipleSimulations>true</runMultipleSimulations>
				  </configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<systemPropertyVariables>
						<org.sqlite.tmpdir>target</org.sqlite.tmpdir>
					</systemPropertyVariables>
					<encoding>UTF-8</encoding>
					<inputEncoding>UTF-8</inputEncoding>
					<outputEncoding>UTF-8</outputEncoding>
					<argLine>${jacoco.agent.ut.arg} -Dfile.encoding=UTF-8</argLine>
					<!-- Specific to generate mapping between tests and covered code -->
					<properties>
						<property>
							<name>listener</name>
							<value>org.sonar.java.jacoco.JUnitListener</value>
						</property>
					</properties>
					<!-- test failure ignore -->
					<testFailureIgnore>true</testFailureIgnore>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<argLine>-Xmx1024m -XX:MaxPermSize=256m ${jacoco.agent.it.arg}
					</argLine>
					<!-- Specific to generate mapping between tests and covered code -->
					<properties>
						<property>
							<name>listener</name>
							<value>org.sonar.java.jacoco.JUnitListener</value>
						</property>
					</properties>
					<!-- Let's put failsafe reports with surefire to have access to tests
						failures/success reports in sonar -->
					<reportsDirectory>${project.build.directory}/surefire-reports
					</reportsDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<!-- Prepares a variable, jacoco.agent.ut.arg, that contains the info
						to be passed to the JVM hosting the code being tested. -->
					<execution>
						<id>prepare-ut-agent</id>
						<phase>process-test-classes</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${sonar.jacoco.reportPath}</destFile>
							<propertyName>jacoco.agent.ut.arg</propertyName>
							<append>true</append>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
